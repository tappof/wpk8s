---
- name: dns names and routes to rfc1918
  hosts: all
  become: true
  vars_files:
    - vm-config.yml
  tasks:
  - name: build /etc/hosts 1
    lineinfile:
      path: /etc/hosts
      regexp: "^.* {{ item.key }}"
      line: "{{ item.value }} {{ item.key }}"
      state: present
    with_items: "{{ dbs_ip | dict2items }}"

  - name: build /etc/hosts 2
    lineinfile:
      path: /etc/hosts
      regexp: "^.* {{ item.key }}"
      line: "{{ item.value }} {{ item.key }}"
      state: present
    with_items: "{{ dbbs_ip | dict2items }}"

  - name: build /etc/hosts 3
    lineinfile:
      path: /etc/hosts
      regexp: "^.* minikube"
      line: "{{ minikube_ip }} minikube"
      state: present

  # mi piace che i ritorni facciano lo stesso giro delle andate
  # su vagrant puo' essere un problema perche' la defgw e' con dhcp su mgmt interface eth0
  # la 192.168.0.0/16 sono costretto a splittarla in questo modo perche' deve rimanere almeno una /20 per docker
  - name: configure static route
    command: "{{ item }}"
    with_items:
      - ip r r 10.0.0.0/8 via "{{ vm_net_gw }}"
      - ip r r 172.16.0.0/12 via "{{ vm_net_gw }}"
      - ip r r 192.168.0.0/20 via "{{ vm_net_gw }}"
      - ip r r 192.168.16.0/20 via "{{ vm_net_gw }}"
      - ip r r 192.168.32.0/20 via "{{ vm_net_gw }}"
      - ip r r 192.168.48.0/20 via "{{ vm_net_gw }}"
      - ip r r 192.168.64.0/20 via "{{ vm_net_gw }}"
      - ip r r 192.168.80.0/20 via "{{ vm_net_gw }}"
      - ip r r 192.168.96.0/20 via "{{ vm_net_gw }}"
      - ip r r 192.168.112.0/20 via "{{ vm_net_gw }}"
      - ip r r 192.168.128.0/20 via "{{ vm_net_gw }}"
      - ip r r 192.168.144.0/20 via "{{ vm_net_gw }}"
      - ip r r 192.168.160.0/20 via "{{ vm_net_gw }}"
      - ip r r 192.168.176.0/20 via "{{ vm_net_gw }}"
      - ip r r 192.168.192.0/20 via "{{ vm_net_gw }}"
      - ip r r 192.168.208.0/20 via "{{ vm_net_gw }}"
      - ip r r 192.168.224.0/20 via "{{ vm_net_gw }}"

- name: dbs provisioning 1
  hosts: dbs
  become: true
  tasks:
  - name: dbs prereqs
    apt:
      pkg:
      - software-properties-common
      - dirmngr

  - name: add mariadb repo key
    apt_key:
      url: https://mariadb.org/mariadb_release_signing_key.asc
      state: present

  - name: add mariadb repo
    apt_repository:
      repo: deb [arch=amd64,arm64,ppc64el] http://ams2.mirrors.digitalocean.com/mariadb/repo/10.5/debian buster main
      state: present
      filename: mariadb
      update_cache: yes

  - name: install mariadb
    apt:
      pkg:
      - mariadb-server=1:10.5.9+maria~buster
      - galera-4=26.4.7-buster
      - python-pymysql
      - rsync

  - name: bind on 0.0.0.0
    lineinfile:
      regexp: "^bind-address.*"
      path: "/etc/mysql/mariadb.conf.d/50-server.cnf"
      line: "bind-address = 0.0.0.0"

  - name: stop mariadb
    systemd:
      state: stopped
      name: mariadb
      enabled: yes

  - name: mariadb file limit
    blockinfile:
      path: /etc/systemd/system/mariadb.service.d/override.conf
      create: yes
      block: |
        [Service]
        LimitNOFILE=100000
        LimitMEMLOCK=100000
    notify: systemd-daemon-reload

  - name: setup galera config file
    template:
      src: etc/mysql/conf.d/galera.cnf  
      dest: /etc/mysql/conf.d/galera.cnf  
      backup: no
      force: yes

  - name: configure vip on db rs and disable arp reply
    command: "{{ item }}"
    # eth1 e' hardcoded perche' so che su vagrant l'interfaccia e' sempre quella
    with_items:
    - ip a a {{ db_vip }}/32 dev eth1 
    - arptables -A INPUT -d {{ db_vip }}/32 -j DROP
    - arptables -A OUTPUT -s {{ db_vip }}/32  -j mangle --mangle-ip-s {{ dbs_ip[ansible_hostname] }}

  handlers:
  - name: systemd-daemon-reload
    systemd:
      daemon_reload: yes

- name: db provisioning 2 
  hosts: db1
  become: true
  vars_files:
    - vm-config.yml
  tasks:
  - name: galera start on bootstrap node 
    command: galera_new_cluster

  - name: start mariadb
    systemd:
      state: started 
      name: mariadb
      enabled: yes

  - name: change mariadb admin pwd
    command: mysql -u root -e 'set password = password("{{ db_root_pwd }}");'

  - name: create wordpress db
    community.mysql.mysql_query:
      query:
      - CREATE DATABASE {{ wpdb_name }} 
      - GRANT ALL ON {{ wpdb_name }}.* TO '{{ wpdb_user }}'@'%' IDENTIFIED BY '{{ wpdb_pass }}'
      - FLUSH PRIVILEGES
      login_user: root
      login_password: "{{ db_root_pwd }}"

- name: dbs provisioning 3
  hosts: dbs:!db1
  become: true
  tasks:
  - name: galera start on standard node 
    systemd:
      state: started 
      name: mariadb
      enabled: yes

- name: configure db balancer
  hosts: dbbs
  become: true
  tasks:
  - name: install keepalived
    apt:
      pkg:
      - keepalived

  - name: template keepalived dbb config file
    template:
      src: etc/keepalived_dbb/keepalived.conf
      dest: /etc/keepalived/keepalived.conf 
      backup: no
      force: yes

  - name: setup dbb master
    lineinfile:
      path: /etc/default/keepalived 
      regexp: "^DAEMON_ARGS=.*"
      line: "DAEMON_ARGS=\"-i high\""
      state: present
    when: ansible_hostname == 'dbb1'

  - name: setup dbb slave 
    lineinfile:
      path: /etc/default/keepalived 
      regexp: "^DAEMON_ARGS=.*"
      line: "DAEMON_ARGS=\"-i high\""
      state: present
    when: ansible_hostname == 'dbb2'

  - name: start dbb keepalived
    systemd:
      name: keepalived
      state: started
      enabled: yes

  - name: expire quiescent template
    sysctl:
      name: "{{ item }}" 
      value: "1"
      state: present
      reload: yes
    with_items:
      - net.ipv4.ip_forward
      - net.ipv4.vs.expire_quiescent_template 
    tags:
      - sysctl

- name: install glusterfs 
  hosts: dbs 
  become: true
  tasks:
  - name: install glusterfs
    apt:
      pkg:
      - glusterfs-server

  - name: start gluster daemon
    systemd:
      state: started
      enabled: yes
      name: glusterd

  - name: create gluster bricks dir
    file:
      path: /bricks/brick1/wpsharedfs
      state: directory

- name: setup gluster volume 
  hosts: db1 
  become: true
  tasks:
  - name: create gluster volume
    gluster_volume:
      state: present
      name: wpsharedfs
      replicas: "{{ db_num }}" 
      rebalance: no 
      force: yes
      bricks: /bricks/brick1/wpsharedfs
      cluster: "{{ dbs_ip | dict2items | json_query('[*].key') | join(',') }}"

- name: minikube
  hosts: minikube
  become: true
  vars_files:
    - vm-config.yml
  tasks:
  - name: install pkgs
    apt:
      update_cache: yes
      pkg:
      - apt-transport-https
      - ca-certificates
      - curl
      - gnupg
      - lsb-release
      - jq
      - swapspace
      - conntrack
      - glusterfs-client

  - name: add docker repo key
    apt_key:
      url: https://download.docker.com/linux/debian/gpg
      state: present

  - name: add docker repo
    apt_repository:
      update_cache: yes
      repo: deb [arch=amd64] https://download.docker.com/linux/debian buster stable
      state: present

  - name: install docker
    apt:
      pkg:
      - docker-ce
      - docker-ce-cli
      - containerd.io

  - name: install minikube
    apt:
      deb: https://storage.googleapis.com/minikube/releases/latest/minikube_latest_amd64.deb

  - name: add kubectl repo key
    apt_key:
      url: https://packages.cloud.google.com/apt/doc/apt-key.gpg  
      state: present

  - name: add kubectl repo
    apt_repository:
      update_cache: yes
      repo: deb https://apt.kubernetes.io/ kubernetes-xenial main
      state: present

  - name: install kubectl
    apt:
      pkg:
      - kubectl

  - name: kubectl bash completion
    shell: kubectl completion bash >> /etc/bash_completion.d/kubectl

  - name: minikube bash completion
    shell: minikube completion bash >> /etc/bash_completion.d/minikube

  - name: start minikube
    command: minikube start --driver=none --addons=ingress

  - name: copy k8s deploy
    template:
      src: k8s/wordpress-deployment.yaml 
      dest: /root/wordpress-deployment.yaml 
      backup: no
      force: yes

    # senza non si riesce a creare l'ingress
  - name: disable ingress validation
    command: kubectl delete validatingwebhookconfigurations.admissionregistration.k8s.io ingress-nginx-admission

  - name: create k8s deploy
    command: kubectl create -f /root/wordpress-deployment.yaml
